{"ast":null,"code":"/**\n * @typedef {import('mdast').Root|import('mdast').Parent['children'][number]} MdastNode\n * @typedef {import('hast').Root|import('hast').Parent['children'][number]} HastNode\n * @typedef {import('mdast').Parent} Parent\n * @typedef {import('mdast').Definition} Definition\n * @typedef {import('mdast').FootnoteDefinition} FootnoteDefinition\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('hast').Text} Text\n * @typedef {import('hast').Comment} Comment\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Root} Root\n * @typedef {import('hast').ElementContent} Content\n * @typedef {import('unist-util-position').PositionLike} PositionLike\n *\n * @typedef EmbeddedHastFields\n * @property {string} [hName] Defines the tag name of an element\n * @property {Properties} [hProperties] Defines the properties of an element\n * @property {Array.<Content>} [hChildren] Defines the (hast) children of an element\n *\n * @typedef {Object.<string, unknown> & EmbeddedHastFields} Data unist data with embedded hast fields\n *\n * @typedef {MdastNode & {data?: Data}} NodeWithData unist node with embedded hast data\n *\n * @callback Handler\n * @param {H} h Handle context\n * @param {any} node mdast node to handle\n * @param {Parent|null} parent Parent of `node`\n * @returns {Content|Array.<Content>|null|undefined} hast node\n *\n * @callback HFunctionProps\n * @param {MdastNode|PositionLike|null|undefined} node mdast node or unist position\n * @param {string} tagName HTML tag name\n * @param {Properties} props Properties\n * @param {Array.<Content>?} [children] hast content\n * @returns {Element}\n *\n * @callback HFunctionNoProps\n * @param {MdastNode|PositionLike|null|undefined} node mdast node or unist position\n * @param {string} tagName HTML tag name\n * @param {Array.<Content>?} [children] hast content\n * @returns {Element}\n *\n * @typedef HFields\n * @property {boolean} dangerous Whether HTML is allowed\n * @property {(identifier: string) => Definition|null} definition Definition cache\n * @property {Object.<string, FootnoteDefinition>} footnoteById Footnote cache\n * @property {Array.<string>} footnoteOrder Order in which footnotes occur\n * @property {Handlers} handlers Applied handlers\n * @property {Handler} unknownHandler Handler for any none not in `passThrough` or otherwise handled\n * @property {(left: NodeWithData|PositionLike|null|undefined, right: Content) => Content} augment Like `h` but lower-level and usable on non-elements.\n * @property {Array.<string>} passThrough List of node types to pass through untouched (except for their children).\n *\n * @typedef Options\n * @property {boolean} [allowDangerousHtml=false] Whether to allow `html` nodes and inject them as `raw` HTML\n * @property {Handlers} [handlers] Object mapping mdast nodes to functions handling them\n * @property {Array.<string>} [passThrough] List of custom mdast node types to pass through (keep) in hast\n * @property {Handler} [unknownHandler] Handler for all unknown nodes.\n *\n * @typedef {Record.<string, Handler>} Handlers Map of node types to handlers\n * @typedef {HFunctionProps & HFunctionNoProps & HFields} H Handle context\n */\nimport { u } from 'unist-builder';\nimport { visit } from 'unist-util-visit';\nimport { pointStart, pointEnd } from 'unist-util-position';\nimport { generated } from 'unist-util-generated';\nimport { definitions } from 'mdast-util-definitions';\nimport { one } from './traverse.js';\nimport { footer } from './footer.js';\nimport { handlers } from './handlers/index.js';\nconst own = {}.hasOwnProperty;\n/**\n * Factory to transform.\n * @param {MdastNode} tree mdast node\n * @param {Options} [options] Configuration\n * @returns {H} `h` function\n */\n\nfunction factory(tree, options) {\n  const settings = options || {};\n  const dangerous = settings.allowDangerousHtml || false;\n  /** @type {Object.<string, FootnoteDefinition>} */\n\n  const footnoteById = {};\n  h.dangerous = dangerous;\n  h.definition = definitions(tree);\n  h.footnoteById = footnoteById;\n  /** @type {Array.<string>} */\n\n  h.footnoteOrder = [];\n  h.augment = augment;\n  h.handlers = { ...handlers,\n    ...settings.handlers\n  };\n  h.unknownHandler = settings.unknownHandler;\n  h.passThrough = settings.passThrough;\n  visit(tree, 'footnoteDefinition', definition => {\n    const id = String(definition.identifier).toUpperCase(); // Mimick CM behavior of link definitions.\n    // See: <https://github.com/syntax-tree/mdast-util-definitions/blob/8290999/index.js#L26>.\n\n    if (!own.call(footnoteById, id)) {\n      footnoteById[id] = definition;\n    }\n  }); // @ts-expect-error Hush, it’s fine!\n\n  return h;\n  /**\n   * Finalise the created `right`, a hast node, from `left`, an mdast node.\n   * @param {(NodeWithData|PositionLike)?} left\n   * @param {Content} right\n   * @returns {Content}\n   */\n\n  function augment(left, right) {\n    // Handle `data.hName`, `data.hProperties, `data.hChildren`.\n    if (left && 'data' in left && left.data) {\n      /** @type {Data} */\n      const data = left.data;\n\n      if (data.hName) {\n        if (right.type !== 'element') {\n          right = {\n            type: 'element',\n            tagName: '',\n            properties: {},\n            children: []\n          };\n        }\n\n        right.tagName = data.hName;\n      }\n\n      if (right.type === 'element' && data.hProperties) {\n        right.properties = { ...right.properties,\n          ...data.hProperties\n        };\n      }\n\n      if ('children' in right && right.children && data.hChildren) {\n        right.children = data.hChildren;\n      }\n    }\n\n    if (left) {\n      const ctx = 'type' in left ? left : {\n        position: left\n      };\n\n      if (!generated(ctx)) {\n        right.position = {\n          start: pointStart(ctx),\n          end: pointEnd(ctx)\n        };\n      }\n    }\n\n    return right;\n  }\n  /**\n   * Create an element for `node`.\n   *\n   * @type {HFunctionProps}\n   */\n\n\n  function h(node, tagName, props, children) {\n    if (Array.isArray(props)) {\n      children = props;\n      props = {};\n    } // @ts-expect-error augmenting an element yields an element.\n\n\n    return augment(node, {\n      type: 'element',\n      tagName,\n      properties: props || {},\n      children: children || []\n    });\n  }\n}\n/**\n * Transform `tree` (an mdast node) to a hast node.\n *\n * @param {MdastNode} tree mdast node\n * @param {Options} [options] Configuration\n * @returns {HastNode|null|undefined} hast node\n */\n\n\nexport function toHast(tree, options) {\n  const h = factory(tree, options);\n  const node = one(h, tree, null);\n  const foot = footer(h);\n\n  if (foot) {\n    // @ts-expect-error If there’s a footer, there were definitions, meaning block\n    // content.\n    // So assume `node` is a parent node.\n    node.children.push(u('text', '\\n'), foot);\n  }\n\n  return Array.isArray(node) ? {\n    type: 'root',\n    children: node\n  } : node;\n}","map":{"version":3,"names":["u","visit","pointStart","pointEnd","generated","definitions","one","footer","handlers","own","hasOwnProperty","factory","tree","options","settings","dangerous","allowDangerousHtml","footnoteById","h","definition","footnoteOrder","augment","unknownHandler","passThrough","id","String","identifier","toUpperCase","call","left","right","data","hName","type","tagName","properties","children","hProperties","hChildren","ctx","position","start","end","node","props","Array","isArray","toHast","foot","push"],"sources":["/Users/gabrielpowers/Desktop/animeDropShip/client/node_modules/mdast-util-to-hast/lib/index.js"],"sourcesContent":["/**\n * @typedef {import('mdast').Root|import('mdast').Parent['children'][number]} MdastNode\n * @typedef {import('hast').Root|import('hast').Parent['children'][number]} HastNode\n * @typedef {import('mdast').Parent} Parent\n * @typedef {import('mdast').Definition} Definition\n * @typedef {import('mdast').FootnoteDefinition} FootnoteDefinition\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('hast').Text} Text\n * @typedef {import('hast').Comment} Comment\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Root} Root\n * @typedef {import('hast').ElementContent} Content\n * @typedef {import('unist-util-position').PositionLike} PositionLike\n *\n * @typedef EmbeddedHastFields\n * @property {string} [hName] Defines the tag name of an element\n * @property {Properties} [hProperties] Defines the properties of an element\n * @property {Array.<Content>} [hChildren] Defines the (hast) children of an element\n *\n * @typedef {Object.<string, unknown> & EmbeddedHastFields} Data unist data with embedded hast fields\n *\n * @typedef {MdastNode & {data?: Data}} NodeWithData unist node with embedded hast data\n *\n * @callback Handler\n * @param {H} h Handle context\n * @param {any} node mdast node to handle\n * @param {Parent|null} parent Parent of `node`\n * @returns {Content|Array.<Content>|null|undefined} hast node\n *\n * @callback HFunctionProps\n * @param {MdastNode|PositionLike|null|undefined} node mdast node or unist position\n * @param {string} tagName HTML tag name\n * @param {Properties} props Properties\n * @param {Array.<Content>?} [children] hast content\n * @returns {Element}\n *\n * @callback HFunctionNoProps\n * @param {MdastNode|PositionLike|null|undefined} node mdast node or unist position\n * @param {string} tagName HTML tag name\n * @param {Array.<Content>?} [children] hast content\n * @returns {Element}\n *\n * @typedef HFields\n * @property {boolean} dangerous Whether HTML is allowed\n * @property {(identifier: string) => Definition|null} definition Definition cache\n * @property {Object.<string, FootnoteDefinition>} footnoteById Footnote cache\n * @property {Array.<string>} footnoteOrder Order in which footnotes occur\n * @property {Handlers} handlers Applied handlers\n * @property {Handler} unknownHandler Handler for any none not in `passThrough` or otherwise handled\n * @property {(left: NodeWithData|PositionLike|null|undefined, right: Content) => Content} augment Like `h` but lower-level and usable on non-elements.\n * @property {Array.<string>} passThrough List of node types to pass through untouched (except for their children).\n *\n * @typedef Options\n * @property {boolean} [allowDangerousHtml=false] Whether to allow `html` nodes and inject them as `raw` HTML\n * @property {Handlers} [handlers] Object mapping mdast nodes to functions handling them\n * @property {Array.<string>} [passThrough] List of custom mdast node types to pass through (keep) in hast\n * @property {Handler} [unknownHandler] Handler for all unknown nodes.\n *\n * @typedef {Record.<string, Handler>} Handlers Map of node types to handlers\n * @typedef {HFunctionProps & HFunctionNoProps & HFields} H Handle context\n */\n\nimport {u} from 'unist-builder'\nimport {visit} from 'unist-util-visit'\nimport {pointStart, pointEnd} from 'unist-util-position'\nimport {generated} from 'unist-util-generated'\nimport {definitions} from 'mdast-util-definitions'\nimport {one} from './traverse.js'\nimport {footer} from './footer.js'\nimport {handlers} from './handlers/index.js'\n\nconst own = {}.hasOwnProperty\n\n/**\n * Factory to transform.\n * @param {MdastNode} tree mdast node\n * @param {Options} [options] Configuration\n * @returns {H} `h` function\n */\nfunction factory(tree, options) {\n  const settings = options || {}\n  const dangerous = settings.allowDangerousHtml || false\n  /** @type {Object.<string, FootnoteDefinition>} */\n  const footnoteById = {}\n\n  h.dangerous = dangerous\n  h.definition = definitions(tree)\n  h.footnoteById = footnoteById\n  /** @type {Array.<string>} */\n  h.footnoteOrder = []\n  h.augment = augment\n  h.handlers = {...handlers, ...settings.handlers}\n  h.unknownHandler = settings.unknownHandler\n  h.passThrough = settings.passThrough\n\n  visit(tree, 'footnoteDefinition', (definition) => {\n    const id = String(definition.identifier).toUpperCase()\n\n    // Mimick CM behavior of link definitions.\n    // See: <https://github.com/syntax-tree/mdast-util-definitions/blob/8290999/index.js#L26>.\n    if (!own.call(footnoteById, id)) {\n      footnoteById[id] = definition\n    }\n  })\n\n  // @ts-expect-error Hush, it’s fine!\n  return h\n\n  /**\n   * Finalise the created `right`, a hast node, from `left`, an mdast node.\n   * @param {(NodeWithData|PositionLike)?} left\n   * @param {Content} right\n   * @returns {Content}\n   */\n  function augment(left, right) {\n    // Handle `data.hName`, `data.hProperties, `data.hChildren`.\n    if (left && 'data' in left && left.data) {\n      /** @type {Data} */\n      const data = left.data\n\n      if (data.hName) {\n        if (right.type !== 'element') {\n          right = {\n            type: 'element',\n            tagName: '',\n            properties: {},\n            children: []\n          }\n        }\n\n        right.tagName = data.hName\n      }\n\n      if (right.type === 'element' && data.hProperties) {\n        right.properties = {...right.properties, ...data.hProperties}\n      }\n\n      if ('children' in right && right.children && data.hChildren) {\n        right.children = data.hChildren\n      }\n    }\n\n    if (left) {\n      const ctx = 'type' in left ? left : {position: left}\n\n      if (!generated(ctx)) {\n        right.position = {start: pointStart(ctx), end: pointEnd(ctx)}\n      }\n    }\n\n    return right\n  }\n\n  /**\n   * Create an element for `node`.\n   *\n   * @type {HFunctionProps}\n   */\n  function h(node, tagName, props, children) {\n    if (Array.isArray(props)) {\n      children = props\n      props = {}\n    }\n\n    // @ts-expect-error augmenting an element yields an element.\n    return augment(node, {\n      type: 'element',\n      tagName,\n      properties: props || {},\n      children: children || []\n    })\n  }\n}\n\n/**\n * Transform `tree` (an mdast node) to a hast node.\n *\n * @param {MdastNode} tree mdast node\n * @param {Options} [options] Configuration\n * @returns {HastNode|null|undefined} hast node\n */\nexport function toHast(tree, options) {\n  const h = factory(tree, options)\n  const node = one(h, tree, null)\n  const foot = footer(h)\n\n  if (foot) {\n    // @ts-expect-error If there’s a footer, there were definitions, meaning block\n    // content.\n    // So assume `node` is a parent node.\n    node.children.push(u('text', '\\n'), foot)\n  }\n\n  return Array.isArray(node) ? {type: 'root', children: node} : node\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}