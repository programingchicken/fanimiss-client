{"ast":null,"code":"import config from './config'; //api func\n\nexport default class Data {\n  api(path) {\n    let method = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'GET';\n    let body = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n    let requiresAuth = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n    let credentials = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : null;\n    const url = config.apiBaseUrl + path; // const url = `http://localhost:3000` + path;\n\n    const options = {\n      method,\n      headers: {\n        'Content-Type': 'application/json; charset=utf-8'\n      }\n    };\n\n    if (body !== null) {\n      options.body = JSON.stringify(body);\n    }\n\n    if (requiresAuth) {\n      const encodedCredentials = btoa(`${credentials.emailAddress}:${credentials.password}`);\n      options.headers['Authorization'] = `Basic ${encodedCredentials}`;\n    }\n\n    return fetch(url, options);\n  } //get user api\n\n\n  async getUser(emailAddress, password) {\n    const response = await this.api(`/users`, 'GET', null, true, {\n      emailAddress,\n      password\n    });\n\n    if (response.status === 200) {\n      return response.json().then(data => data);\n    } else if (response.status === 401) {\n      return null;\n    } else {\n      throw new Error();\n    }\n  } //post user api\n\n\n  async createUser(user) {\n    const response = await this.api('/users', 'POST', user);\n\n    if (response.status === 201) {\n      return [];\n    } else if (response.status === 400) {\n      return response.json().then(data => {\n        return data.errors;\n      });\n    } else {\n      throw new Error();\n    }\n  } //post Course \n\n\n  async reviewCreate(course, emailAddress, password) {\n    const response = await this.api('/course', 'POST', course, true, {\n      emailAddress,\n      password\n    });\n\n    if (response.status === 201) {\n      return [];\n    } else if (response.status === 400) {\n      return response.json().then(data => {\n        return data.errors;\n      });\n    } else {\n      throw new Error();\n    }\n  }\n\n}","map":{"version":3,"names":["config","Data","api","path","method","body","requiresAuth","credentials","url","apiBaseUrl","options","headers","JSON","stringify","encodedCredentials","btoa","emailAddress","password","fetch","getUser","response","status","json","then","data","Error","createUser","user","errors","reviewCreate","course"],"sources":["/Users/gabrielpowers/Desktop/animeDropShip/client/src/components/Data.js"],"sourcesContent":["import config from './config';\n\n\n//api func\nexport default class Data {\n  api(path, method = 'GET', body = null, requiresAuth = false, credentials = null) {\n    const url = config.apiBaseUrl + path;\n    // const url = `http://localhost:3000` + path;\n\n  \n    const options = {\n      method,\n      headers: {\n        'Content-Type': 'application/json; charset=utf-8',\n      },\n    };\n\n    if (body !== null) {\n      options.body = JSON.stringify(body);\n    }\n\n    if (requiresAuth) {    \n      const encodedCredentials = btoa(`${credentials.emailAddress}:${credentials.password}`);\n      options.headers['Authorization'] = `Basic ${encodedCredentials}`;\n    }\n    return fetch(url, options);\n  }\n\n\n\n  //get user api\n  async getUser(emailAddress, password) {\n    const response = await this.api(`/users`, 'GET', null, true, { emailAddress, password });\n    if (response.status === 200) {\n      return response.json().then(data => data);\n    }\n    else if (response.status === 401) {\n      return null;\n    }\n    else {\n      throw new Error();\n    }\n  }\n\n\n  //post user api\n  async createUser(user) {\n    const response = await this.api('/users', 'POST', user);\n    if (response.status === 201) {\n      return [];\n    }\n    else if (response.status === 400) {\n      return response.json().then(data => {\n        return data.errors;\n      });\n    }\n    else {\n      throw new Error();\n    }\n  }\n  \n  //post Course \n  async reviewCreate(course, emailAddress, password) {\n    const response = await this.api('/course', 'POST', course, true, { emailAddress, password });\n    if (response.status === 201) {\n      return [];\n    }\n    else if (response.status === 400) {\n      return response.json().then(data => {\n        return data.errors;\n      });\n    }\n    else {\n      throw new Error();\n    }\n  }\n}\n\n"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,UAAnB,C,CAGA;;AACA,eAAe,MAAMC,IAAN,CAAW;EACxBC,GAAG,CAACC,IAAD,EAA8E;IAAA,IAAvEC,MAAuE,uEAA9D,KAA8D;IAAA,IAAvDC,IAAuD,uEAAhD,IAAgD;IAAA,IAA1CC,YAA0C,uEAA3B,KAA2B;IAAA,IAApBC,WAAoB,uEAAN,IAAM;IAC/E,MAAMC,GAAG,GAAGR,MAAM,CAACS,UAAP,GAAoBN,IAAhC,CAD+E,CAE/E;;IAGA,MAAMO,OAAO,GAAG;MACdN,MADc;MAEdO,OAAO,EAAE;QACP,gBAAgB;MADT;IAFK,CAAhB;;IAOA,IAAIN,IAAI,KAAK,IAAb,EAAmB;MACjBK,OAAO,CAACL,IAAR,GAAeO,IAAI,CAACC,SAAL,CAAeR,IAAf,CAAf;IACD;;IAED,IAAIC,YAAJ,EAAkB;MAChB,MAAMQ,kBAAkB,GAAGC,IAAI,CAAE,GAAER,WAAW,CAACS,YAAa,IAAGT,WAAW,CAACU,QAAS,EAArD,CAA/B;MACAP,OAAO,CAACC,OAAR,CAAgB,eAAhB,IAAoC,SAAQG,kBAAmB,EAA/D;IACD;;IACD,OAAOI,KAAK,CAACV,GAAD,EAAME,OAAN,CAAZ;EACD,CAtBuB,CA0BxB;;;EACa,MAAPS,OAAO,CAACH,YAAD,EAAeC,QAAf,EAAyB;IACpC,MAAMG,QAAQ,GAAG,MAAM,KAAKlB,GAAL,CAAU,QAAV,EAAmB,KAAnB,EAA0B,IAA1B,EAAgC,IAAhC,EAAsC;MAAEc,YAAF;MAAgBC;IAAhB,CAAtC,CAAvB;;IACA,IAAIG,QAAQ,CAACC,MAAT,KAAoB,GAAxB,EAA6B;MAC3B,OAAOD,QAAQ,CAACE,IAAT,GAAgBC,IAAhB,CAAqBC,IAAI,IAAIA,IAA7B,CAAP;IACD,CAFD,MAGK,IAAIJ,QAAQ,CAACC,MAAT,KAAoB,GAAxB,EAA6B;MAChC,OAAO,IAAP;IACD,CAFI,MAGA;MACH,MAAM,IAAII,KAAJ,EAAN;IACD;EACF,CAtCuB,CAyCxB;;;EACgB,MAAVC,UAAU,CAACC,IAAD,EAAO;IACrB,MAAMP,QAAQ,GAAG,MAAM,KAAKlB,GAAL,CAAS,QAAT,EAAmB,MAAnB,EAA2ByB,IAA3B,CAAvB;;IACA,IAAIP,QAAQ,CAACC,MAAT,KAAoB,GAAxB,EAA6B;MAC3B,OAAO,EAAP;IACD,CAFD,MAGK,IAAID,QAAQ,CAACC,MAAT,KAAoB,GAAxB,EAA6B;MAChC,OAAOD,QAAQ,CAACE,IAAT,GAAgBC,IAAhB,CAAqBC,IAAI,IAAI;QAClC,OAAOA,IAAI,CAACI,MAAZ;MACD,CAFM,CAAP;IAGD,CAJI,MAKA;MACH,MAAM,IAAIH,KAAJ,EAAN;IACD;EACF,CAvDuB,CAyDxB;;;EACkB,MAAZI,YAAY,CAACC,MAAD,EAASd,YAAT,EAAuBC,QAAvB,EAAiC;IACjD,MAAMG,QAAQ,GAAG,MAAM,KAAKlB,GAAL,CAAS,SAAT,EAAoB,MAApB,EAA4B4B,MAA5B,EAAoC,IAApC,EAA0C;MAAEd,YAAF;MAAgBC;IAAhB,CAA1C,CAAvB;;IACA,IAAIG,QAAQ,CAACC,MAAT,KAAoB,GAAxB,EAA6B;MAC3B,OAAO,EAAP;IACD,CAFD,MAGK,IAAID,QAAQ,CAACC,MAAT,KAAoB,GAAxB,EAA6B;MAChC,OAAOD,QAAQ,CAACE,IAAT,GAAgBC,IAAhB,CAAqBC,IAAI,IAAI;QAClC,OAAOA,IAAI,CAACI,MAAZ;MACD,CAFM,CAAP;IAGD,CAJI,MAKA;MACH,MAAM,IAAIH,KAAJ,EAAN;IACD;EACF;;AAvEuB"},"metadata":{},"sourceType":"module"}